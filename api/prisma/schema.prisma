generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String    @default("")        
  lastName        String    @default("")
  password        String    @default("")
  email           String    @unique() @default("")   
  description     String    @default("")   
  interest        String    @default("")
  googleUserToken String?   @default("")
  
  posts           Post[]

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Post {
  id          Int       @id @default(autoincrement())
  content     String    @default("") // Can be text or JSON
  media       Media[]   
  user        User      @relation(fields: [userId], references: [id])
  userId      Int

  likes       Like[]
  comments    Comment[]
  ratings     Rating[]
  shares      Share[]

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Media {
  id          Int        @id @default(autoincrement())
  url         String     @default("") // URL or file path to the media file
  type        String     // Store the media type as a string (e.g., 'IMAGE', 'AUDIO', 'VIDEO')
  post        Post       @relation(fields: [postId], references: [id])
  postId      Int
  createdAt   DateTime   @default(now())
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  value     Int      @default(0) // Rating value (e.g., from 1 to 5)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model Share {
  id        Int      @id @default(autoincrement())
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}
